{"version":3,"sources":["components/Editor.js","containers/ControlledEditor.js","actions/index.js","components/Preview.js","containers/ControlledPreview.js","App.js","serviceWorker.js","reducers/text.js","reducers/index.js","index.js"],"names":["Editor","_ref","text","handleChange","react_default","a","createElement","id","className","value","onChange","connect","state","dispatch","e","preventDefault","target","type","changeText","Preview","react_marked_markdown","markedOptions","tables","breaks","App","document","getElementsByClassName","ControlledEditor","ControlledPreview","Component","Boolean","window","location","hostname","match","arguments","length","undefined","action","combineReducers","store","createStore","rootReducer","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sLAeeA,SAZA,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,KAAMC,EAARF,EAAQE,aAAR,OACXC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,mBAAmBC,UAAU,UACjCJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAf,QACAJ,EAAAC,EAAAC,cAAA,YAAUC,GAAG,SAASE,MAAOP,EAAMQ,SAAUP,eCUtCQ,cAZS,SAAAC,GAAK,MAAK,CAC9BV,KAAMU,EAAMV,OAGW,SAAAW,GAAQ,MAAK,CACpCV,aAAc,SAAAW,GACVA,EAAEC,iBACF,IAAMb,EAAOY,EAAEE,OAAOP,MACtBI,ECZkB,SAAAX,GAAI,MAAK,CAC/Be,KAAM,cACNf,QDUagB,CAAWhB,OAIbS,CAA6CX,WED7CmB,EAXC,SAAAlB,GAAA,IAAEC,EAAFD,EAAEC,KAAF,OACZE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAASD,GAAG,qBAC3BH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAf,WACIJ,EAAAC,EAAAC,cAACc,EAAA,gBAAD,CAAiBZ,UAAU,UAAUC,MAAOP,EAAMmB,cAAe,CAACC,QAAO,EAAMC,QAAQ,OCKhFZ,cARS,SAAAC,GAAK,MAAK,CAC9BV,KAAMU,EAAMV,OAGW,SAAAW,GAAQ,MAAK,IAIzBF,CAA6CQ,GCW7CK,8LAdOC,SAASC,uBAAuB,WAAW,GACnDnB,GAAK,2CAGf,OACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SAAd,sBACAJ,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,cAXUC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECcShC,EATF,WAAiC,IAAhCU,EAAgCuB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAvB7B,omBAuBkBG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,OAAQC,EAAOrB,MACb,IAAK,cACD,OAAOqB,EAAOpC,KAClB,QACE,OAAOU,ICzBE2B,cAAgB,CAC3BrC,SCIEsC,EAAQC,YAAYC,GAE1BC,IAASC,OACLxC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAUL,MAAOA,GACbpC,EAAAC,EAAAC,cAACwC,EAAD,OAEJrB,SAASsB,eAAe,SHmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0f88c0b7.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Editor = ({text, handleChange}) => (\n    <div id=\"editor-container\" className=\"window\">\n        <div className='window-label'>Edit</div>\n        <textarea id=\"editor\" value={text} onChange={handleChange} />\n    </div>\n)\n\nEditor.propTypes = {\n  text: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired\n}\n\nexport default Editor;","import Editor from '../components/Editor';\nimport { connect } from 'react-redux';\nimport { changeText } from '../actions';\n\nconst mapStateToProps = state => ({\n    text: state.text\n})\n\nconst mapDispatchToProps = dispatch => ({\n    handleChange: e => {\n        e.preventDefault();\n        const text = e.target.value;\n        dispatch(changeText(text));\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);","export const changeText = text => ({\n    type: 'TEXT_CHANGE',\n    text\n})","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { MarkdownPreview } from 'react-marked-markdown';\n\nconst Preview = ({text}) => (\n    <div className=\"window\" id=\"preview-container\">\n    <div className='window-label'>Preview</div>\n        <MarkdownPreview className='preview' value={text} markedOptions={{tables:true, breaks: true}}/>\n    </div>\n)\n\nPreview.propTypes = {\n  text: PropTypes.string.isRequired\n}\n\nexport default Preview;","import Preview from '../components/Preview';\nimport { connect } from 'react-redux';\n\n\nconst mapStateToProps = state => ({\n    text: state.text\n})\n\nconst mapDispatchToProps = dispatch => ({\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Preview);","import React, { Component } from 'react';\nimport './App.css';\nimport ControlledEditor from './containers/ControlledEditor';\nimport ControlledPreview from './containers/ControlledPreview'; \n\n\nclass App extends Component {\n  //For freeCodeCamp User Story #4, the MarkdownPreview div needs id = 'preview'\n  componentDidMount() {\n    const myPreview = document.getElementsByClassName('preview')[0];\n    myPreview.id = 'preview';\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Markdown Previewer</h1>\n        <ControlledEditor />\n        <ControlledPreview />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const defaultText =  \n`# Markdown Previewer\n## Render GitHub flavored markdown as HTML\nDon't know how to write in markdown?  Here's a [cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n\nYou can write inline code: \\`<div>Hello World!</div>\\`\n\nand code blocks...\n\\`\\`\\`\n<h1>Hello...</h1>\n<h2>World</h2>\n\\`\\`\\`\nYou can also write lists:\n1. **Bold text**\n2. ~~Strikethrough~~\n\nAnd of course, images with quotes:\n\n![Abraham Lincoln](./Abe.png \"Abraham Lincoln\")\n\n> \"Don't believe everything you read on the internet just because there's a quote with a picture on it.\"\n>\n>  \\\\- Abraham Lincoln`\nconst text = (state = defaultText, action) => {\n  switch (action.type) {\n    case 'TEXT_CHANGE':\n        return action.text\n    default:\n      return state\n  }\n}\n\nexport default text","import { combineReducers } from 'redux';\nimport text from './text';\n\nexport default combineReducers({\n    text\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}